<?php

/**
 * Question
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    sf
 * @subpackage model
 * @author     Atma
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Question extends BaseQuestion
{
  public static function syncToVk($object, $type = false)
  {
    if(!$object['body'])
    {
      return;
    }
    if(get_class($object) == 'Answer')
    {
      $question_id = $object['question_id'] ? $object['question_id'] : $object->getQuestionId();
      $question = Doctrine::getTable("Question")->find($question_id);
      $topic_id = $question->getTopicId();
      $random_id = $object['id'] ? $object['id'] : $object->getId();

      if(substr_count($question->getUser()->getUsername(), 'vk.com') > 0)
      {
        $method = 'https://api.vk.com/method/';
        $method .= $type != 'topic' ? 'messages.send' : 'board.createComment';
        // $method .= $type != 'topic' ? 'messages.send' : 'board.addComment';

        $body = ($object['body'] ? $object['body'] : $object->getBody());

        $user = $question->getUser();
        $user_exp = explode('id', $user->getUsername());
        if($type == 'topic')
        {
          $get_user_method = 'https://api.vk.com/method/users.get';
          $get_user_param = array(
            'user_ids' => $user_exp[1],
            'lang' => 'ru'
          );
          $get_user = json_decode(ProjectUtils::post($get_user_method, $get_user_param), true);
          $get_user_first_name = $get_user['response'][0]['first_name'];
          if(count($question->getAnswer()) > 0)
          {
            $last_comment = Doctrine_Query::create()
              ->select("q.*, a.*")
              ->from("Question q")
              ->innerJoin("q.Answer a")
              ->where("q.topic_id IS NOT NULL")
              ->andWhere("q.user_id = " . $question->getUserId())
//              ->andWhere("a.user_id = " . $question->getUserId())
              ->orderBy("q.created_at DESC")
              ->orderBy("a.id DESC")
              ->limit(1)
              ->fetchArray()
            ;
            $last_comment_id = $last_comment[0]['comment_id'];
            $guid = $last_comment[0]['id'];

            if(count($last_comment[0]['Answer']) > 0)
            {
              $guid = $last_comment[0]['Answer'][0]['id'];
            }
            foreach ($last_comment[0]['Answer'] as $comment)
            {
              if($last_comment_id < $comment['comment_id'])
              {
                $last_comment_id = $comment['comment_id'];
              }
            }
          }
          else
          {
            $last_comment_id = $question->getCommentId();
          }
          if($get_user_first_name)
          {
            $user_data = '[id' . $user_exp[1] . ':bp-' . sfConfig::get('app_vk_group_id') . '_' . $last_comment_id . '|' . $get_user_first_name . '], ';
          }

          /*
          if($object->getType() == 'please_analysis')
          {
            $please_analysis = json_decode($object->getBody(), true);
            $body = "Вам необходимо сдать следующие анализы:";
            foreach ($please_analysis as $pa_key => $pa)
            {
              $pa_exp = explode(':', $pa);
              $body .= ($pa_key != 0 ? ';' : '') . "\n" . ($pa_key + 1) . ". " . $pa_exp[1];
            }
            $body .= ".";
          }
          */

          $body = 'Добрый день. Вам ответили на портале http://vrachrb.ru/question-answer/' . $question_id . '/' . "\n" . 'Также на портале вы можете задать дополнительные вопросы, авторизовавшись через «Вконтакте»';

          $param = array(
            'group_id' => sfConfig::get('app_vk_group_id'),
            'topic_id' => $topic_id,
            'text' => $user_data . $body,
            'from_group' => 1,
            'guid' => $guid,
            'access_token' => sfConfig::get('app_vk_access_token_user')
          );
        }
        else
        {
          $param = array(
            'user_id' => $user_exp[1],
            'message' => $body,
//            'random_id' => $random_id,
            'access_token' => sfConfig::get('app_vk_access_token')
          );
        }
        $json = json_decode(ProjectUtils::post($method, $param), true);


        file_put_contents(sfConfig::get('sf_log_dir') . '/vk_answers_last.txt', print_r($json, true) . '__');


        $error_code_repeat = array(1,2,4,5,6,7,9,10,603);
        if($json['error'])
        {
          if(is_array($object))
          {
            $q_id = $object['question_id'];
            $u_id = $object['user_id'];
            $body = $object['body'];
          }
          else
          {
            $q_id = $object->getQuestionId();
            $u_id = $object->getUserId();
            $body = $object->getBody();
          }

          if(in_array($json['error']['error_code'], $error_code_repeat))
          {
            file_put_contents(sfConfig::get('sf_log_dir') . '/vk_answers_not_sent.txt', print_r($json, true));

            $file = json_decode(file_get_contents(sfConfig::get('sf_log_dir') . '/vk_answers_log.txt'), true);

            $new_answer = array('date' => date('Y-m-d' . ' ' . 'H:i:s'), 'question_id' => $q_id, 'user_id' => $u_id, 'body' => $body);

            if($file != '' && is_array($file))
            {
              $file[] = $new_answer;
            }
            else
            {
              $file = array(
                $new_answer
              );
            }

            if(!$type)
            {
              file_put_contents(sfConfig::get('sf_log_dir') . '/vk_answers_log.txt', json_encode($file, true));
            }
          }
          return false;
        }
        elseif($json['response'])
        {
          return $json['response'];
        }
      }
    }
  }
  public static function vlLpMailer($param)
  {
    $message = Swift_Message::newInstance()
      ->setFrom('noreply@' . $param['host'])
      ->setContentType('text/html; charset=UTF-8')
      ->setTo(csSettings::get('admin_email'))
      ->setSubject($param['subject'])
      ->setBody($param['body'])
    ;
    sfContext::getInstance()->getMailer()->send($message);
  }
  public static function QuestionNew($param)
  {
    $question = new Question();
    $question->setUserId($param['user_id']);
    $question->setBody($param['body']);
    $question->setCommentId($param['mid']);
    if($param['date'])
    {
      $question->setCreatedAt(date('Y-m-d' . ' ' . 'H:i:s', $param['date']));
    }
    if($param['topic_id'])
    {
      $question->setTopicId($param['topic_id']);
    }
    $question->save();
    return $question->getId();
  }
  public static function vkQuestionCheck($arr, $topic_id = false)
  {
    if($arr['type'] == 'message_new')
    {
      $vk_body = $arr['object']['message']['body'];
      $vk_mid = $arr['object']['message']['id'];
      $vk_date = $arr['object']['message']['date'] - sfConfig::get('app_vk_time_difference');
      $vk_user_id = $arr['object']['message']['user_id'];
    }
    elseif($arr['type'] == 'board_post_new' || $arr['type'] == 'board_post_edit')
    {
      $vk_body = $arr['object']['text'];
      if(substr_count($arr['object']['text'], 'bp-' . sfConfig::get('app_vk_group_id')) > 0)
      {
        $body_exp = explode('],', $arr['object']['text']);
        $vk_body = trim($body_exp[1]);
      }
      $vk_mid = $arr['object']['id'];
      $vk_date = $arr['object']['date'] - sfConfig::get('app_vk_time_difference');
      $vk_user_id = $arr['object']['from_id'];
      $vk_topic_id = $arr['object']['topic_id'];
      $sql_condition = ' NOT';
    }
    elseif($topic_id)
    {
      $vk_body = $arr['text'];
      $vk_mid = $arr['id'];
      $vk_date = $arr['date'] - sfConfig::get('app_vk_time_difference');
      $vk_user_id = $arr['from_id'];
      $vk_topic_id = $topic_id;
      $sql_condition = ' NOT';
      $vk_attachment = 'sync';
    }

    $answer_check = Doctrine::getTable("Answer")->findOneByCommentId($vk_mid);
    $question_check = Doctrine::getTable("Question")->findOneByCommentId($vk_mid);

    if(($answer_check || $question_check) && $arr['type'] == 'board_post_edit')
    {
      $edit = true;
    }

    if((!$answer_check && !$question_check) || $edit)
    {
      $user = Doctrine::getTable("User")->findOneByUsername("http://vk.com/id" . $vk_user_id);

      if($user)
      {
        $uqo = Doctrine_Query::create()
          ->select("q.*")
          ->from("Question q")
          ->where("q.closed_by IS NULL")
          ->andWhere("q.comment_id IS NOT NULL")
        ;
        $uqo->andWhere("q.topic_id IS" . $sql_condition . " NULL");
        if($vk_topic_id)
        {
          $uqo->andWhere("q.topic_id = " . $vk_topic_id);
        }
        $uqo
          ->andWhere("q.user_id = " . $user->getId())
          ->orderBy("q.created_at DESC")
          ->limit(1)
        ;
        $user_question_open = $uqo->fetchArray();
        if(count($user_question_open) > 0)
        {
          if(count($user_question_open[0]['Answer']) > 0)
          {
            foreach ($user_question_open[0]['Answer'] as $a)
            {
              if($a['body'] == $vk_body)
              {
                $repeat_answer_error = true;
              }
            }
          }
          if(!$repeat_answer_error && $vk_body != '')
          {
            Answer::AnswerNew(array(
              'user_id' => $user->getId(),
              'question_id' => $user_question_open[0]['id'],
              'body' => $vk_body,
              'mid' => $vk_mid . ($edit ? '_edit' : ''),
              'date' => $vk_date
            ));
          }
        }
        elseif(count($user_question_open) == 0)
        {
          $new_question_and_specialist = true;
        }
      }
      else
      {
        $user = Question::vkUserAdd($vk_user_id, true);
        $new_question_and_specialist = true;
      }

      if($new_question_and_specialist && $vk_body != '' && $user)
      {
        $question_id = Question::QuestionNew(array(
          'user_id' => $user->getId(),
          'body' => $vk_body,
          'mid' => $vk_mid . ($edit ? '_edit' : ''),
          'date' => $vk_date,
          'topic_id' => $vk_topic_id
        ));
        if($question_id)
        {
          $question_specialist = new QuestionSpecialist();
          $question_specialist->setQuestionId($question_id);
          $question_specialist_id = 51;
          if($vk_topic_id)
          {
            $specialty = Specialty::map($vk_topic_id);
            if(!$specialty)
            {
              $specialty = $arr['object']['topic_id'] ? $arr['object']['topic_id'] : $vk_topic_id;
            }
            $specialists = Doctrine::getTable("Specialist")
              ->createQuery("s")
              ->whereIn("s.specialty_id", $specialty)
              ->fetchArray()
            ;
                                            
            $specialists_count = count($specialists);
            if($specialists_count > 0)
            {
              $question_specialist_id = $specialists[rand(0, ($specialists_count - 1))]['id'];
            }
          }

          $question_specialist->setSpecialistId($question_specialist_id);
          $question_specialist->save();

          $specialty_check = Doctrine::getTable("Specialty")->find($specialty);
          if($specialty_check)
          {
            $question_specialty = new QuestionSpecialty();
            $question_specialty->setQuestionId($question_id);
            $question_specialty->setSpecialtyId($specialty);
            $question_specialty->save();
          }
          if($question_specialist && sfConfig::get('app_vk_publish'))
          {
            Page::noticeAdd('s', 'dialog', $question_id, 'question');
          }
        }
      }

      $q_id = $question_id ? $question_id : $user_question_open[0]['id'];
      if($q_id)
      {
        Question::vkAttachment($user->getId(), $arr, $q_id, $vk_attachment);
      }
    }
  }
  public function save(Doctrine_Connection $conn = null)
  {
    if($this->getClosedBy())
    {
      $this->setClosingDate(date('Y-m-d' . ' ' . 'H:i:s'));
    }
    if($this->isNew() == false)
    {
      $specialist_check = Doctrine::getTable("QuestionSpecialist")->findOneByQuestionId($this->getId());
      $sp_change = $this->getSpecialists();
      if($specialist_check)
      {
        if(count($sp_change) > 0)
        {
          foreach ($sp_change as $sp)
          {
            if($specialist_check->getSpecialistId() != $sp)
            {
              $new_notice = array(
                'user_id' => $sp->getUserId(),
                'inner_id' => $this->getId()
              );
            }
          }
        }
      }
      elseif(count($sp_change) > 0)
      {
        foreach ($sp_change as $sp)
        {
          $new_notice = array(
            'user_id' => $sp->getUserId(),
            'inner_id' => $this->getId()
          );
        }
      }
      if(is_array($new_notice))
      {
        $notice_check = Doctrine_Query::create()
          ->select("n.*")
          ->from("Notice n")
          ->where("n.user_id = " . $new_notice['user_id'])
          ->andWhere("n.type = 'dialog'")
          ->andWhere("n.inner_id = " . $this->getId())
          ->andWhere("n.event = 'question'")
          ->fetchArray()
        ;
        if(count($notice_check) == 0)
        {
//          Page::noticeAdd('s', 'dialog', $this->getId(), 'question');

//          $notice = new Notice();
//          $notice->setUserId($sp->getUserId());
//          $notice->setType('dialog');
//          $notice->setInnerId($this->getId());
//          $notice->setEvent('question');
//          $notice->save();
        }
      }
    }

    $result = parent::save($conn);

    Question::syncToVk($this);

    return $result;
  }
  static function vkAttachment($user_id, $arr, $q_id, $type = false)
  {
    if($type == 'sync')
    {
      $attachments = $arr['attachments'];
      $photo_size = array(
        'src_xxbig',
        'src_xbig',
        'src_big'
      );
    }
    else
    {
      $attachments = $arr['object']['attachments'];
      $photo_size = array(
        '1280',
        '807',
        '604',
        '130'
      );
    }
    if(is_array($attachments) && count($attachments) > 0)
    {
      $photo_size_check = '';
      foreach ($attachments as $attachment)
      {
        $valid_photo_type = array(
          '.jpeg',
          '.gif',
          '.png',
          '.jpg'
        );
        $at_type = $attachment;
        if($type != 'sync')
        {
          $prefix_size = 'photo_';
        }
        if($at_type['type'] == 'photo')
        {
          foreach ($photo_size as $p_size)
          {
            $at_pid = $at_type['photo']['pid'] ? $at_type['photo']['pid'] : $at_type['photo']['id'];
            if($at_type['photo'][$prefix_size . $p_size] && substr_count($photo_size_check, $at_pid) == 0)
            {
              $photo_size_check .= $at_pid . '_';
              $file_dir = $at_type['photo'][$prefix_size . $p_size];
              $file = file_get_contents($file_dir);
              $format = substr($file_dir, -5);
              foreach ($valid_photo_type as $v_key => $v_type)
              {
                if(substr_count($format, $v_type) > 0)
                {
                  file_put_contents(sfConfig::get('sf_upload_dir') . '/vk/vk_image' . $v_type, $file);
                  $upload_json = Page::uploader('/vk/vk_image' . $v_type, 'analysis', 'local');
                  $upload_arr = json_decode($upload_json, true);
                  if(!$analysis_answer)
                  {
                    $analysis_answer = new Answer();
                    $analysis_answer->setUserId($user_id);
                    $analysis_answer->setQuestionId($q_id);
                    $analysis_answer->setBody('give_analysis');
                    $analysis_answer->setType('give_analysis');
                    $analysis_answer->setCommentId($arr['object']['id']);
                    $analysis_answer->save();
                    if($analysis_answer)
                    {
                      $analysys_new = new Analysis();
                      $analysys_new->setAnswerId($analysis_answer->getId());
                      $analysys_new->setUserId($user_id);
                      $analysys_new->setAnalysisTypeId(-1);
                      $analysys_new->setPhoto($upload_arr['filename']);
                      $analysys_new->save();
                    }
                  }
                  elseif($analysis_answer)
                  {
                    $analysys_new = new Analysis();
                    $analysys_new->setAnswerId($analysis_answer->getId());
                    $analysys_new->setUserId($user_id);
                    $analysys_new->setAnalysisTypeId(-1);
                    $analysys_new->setPhoto($upload_arr['filename']);
                    $analysys_new->save();
                  }
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
  static function vkUserAdd($vk_user_id, $new = false)
  {
    $user = new User();
    $user->setUsername('http://vk.com/id' . $vk_user_id);

    $user_bdate = rand(1960, date('Y')) . ':' . str_pad(rand(1, 12), 2, '0', STR_PAD_LEFT)  . ':' . str_pad(rand(1, 28), 2, '0', STR_PAD_LEFT) . ' 00:00:00';
    $user->setBirthDate($user_bdate);

    $user->save();
    if($user)
    {
      $method = 'https://api.vk.com/method/users.get';
      $params = array(
        'user_ids' => $vk_user_id,
        'fields' => 'sex, bdate',
        'lang' => 'ru'
      );
      $user_info = json_decode(ProjectUtils::post($method, $params), true);
      $user_info_response = $user_info['response'][0];
      if($user_info_response)
      {
        $user_info_response['first_name'] ? $user->setFirstName($user_info_response['first_name']) : '';
        $user_info_response['last_name'] ? $user->setSecondName($user_info_response['last_name']) : '';
        $user->setGender(($user_info_response['sex'] == 1 ? 'ж' : 'м'));

        if($user_info_response['bdate'])
        {
          $b_date_exp = explode('.', $user_info_response['bdate']);
          if(count($b_date_exp) == 3)
          {
            $user_bdate = date($b_date_exp[2] . '-' . $b_date_exp[1] . '-' . $b_date_exp[0]);
            $user->setBirthDate($user_bdate);
          }
        }
      }
      $user->save();
    }
    return $user;
  }
}