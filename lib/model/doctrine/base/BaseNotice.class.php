<?php

/**
 * BaseNotice
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property string $type
 * @property integer $inner_id
 * @property string $event
 * @property User $User
 * 
 * @method integer getUserId()   Returns the current record's "user_id" value
 * @method string  getType()     Returns the current record's "type" value
 * @method integer getInnerId()  Returns the current record's "inner_id" value
 * @method string  getEvent()    Returns the current record's "event" value
 * @method User    getUser()     Returns the current record's "User" value
 * @method Notice  setUserId()   Sets the current record's "user_id" value
 * @method Notice  setType()     Sets the current record's "type" value
 * @method Notice  setInnerId()  Sets the current record's "inner_id" value
 * @method Notice  setEvent()    Sets the current record's "event" value
 * @method Notice  setUser()     Sets the current record's "User" value
 * 
 * @package    sf
 * @subpackage model
 * @author     Atma
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseNotice extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('notice');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('inner_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('event', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}