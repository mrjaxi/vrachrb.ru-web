<?php

/**
 * BaseQuestion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $user_about_id
 * @property text $body
 * @property boolean $is_anonymous
 * @property boolean $approved
 * @property string $comment_id
 * @property string $topic_id
 * @property boolean $vk_notice
 * @property integer $closed_by
 * @property timestamp $closing_date
 * @property User $User
 * @property User $UserAbout
 * @property User $UserClosed
 * @property Doctrine_Collection $Specialists
 * @property Doctrine_Collection $Specialtys
 * @property Doctrine_Collection $Review
 * @property Doctrine_Collection $Question_black_list
 * @property Doctrine_Collection $Consilium
 * @property Doctrine_Collection $Complaint
 * @property Doctrine_Collection $Reception_contract
 * @property Doctrine_Collection $Answer
 * @property Doctrine_Collection $QuestionData
 * @property Doctrine_Collection $QuestionSpecialist
 * @property Doctrine_Collection $QuestionSpecialty
 * @property Doctrine_Collection $QuestionSheetHistory
 * 
 * @method integer             getUserId()               Returns the current record's "user_id" value
 * @method integer             getUserAboutId()          Returns the current record's "user_about_id" value
 * @method text                getBody()                 Returns the current record's "body" value
 * @method boolean             getIsAnonymous()          Returns the current record's "is_anonymous" value
 * @method boolean             getApproved()             Returns the current record's "approved" value
 * @method string              getCommentId()            Returns the current record's "comment_id" value
 * @method string              getTopicId()              Returns the current record's "topic_id" value
 * @method boolean             getVkNotice()             Returns the current record's "vk_notice" value
 * @method integer             getClosedBy()             Returns the current record's "closed_by" value
 * @method timestamp           getClosingDate()          Returns the current record's "closing_date" value
 * @method User                getUser()                 Returns the current record's "User" value
 * @method User                getUserAbout()            Returns the current record's "UserAbout" value
 * @method User                getUserClosed()           Returns the current record's "UserClosed" value
 * @method Doctrine_Collection getSpecialists()          Returns the current record's "Specialists" collection
 * @method Doctrine_Collection getSpecialtys()           Returns the current record's "Specialtys" collection
 * @method Doctrine_Collection getReview()               Returns the current record's "Review" collection
 * @method Doctrine_Collection getQuestionBlackList()    Returns the current record's "Question_black_list" collection
 * @method Doctrine_Collection getConsilium()            Returns the current record's "Consilium" collection
 * @method Doctrine_Collection getComplaint()            Returns the current record's "Complaint" collection
 * @method Doctrine_Collection getReceptionContract()    Returns the current record's "Reception_contract" collection
 * @method Doctrine_Collection getAnswer()               Returns the current record's "Answer" collection
 * @method Doctrine_Collection getQuestionData()         Returns the current record's "QuestionData" collection
 * @method Doctrine_Collection getQuestionSpecialist()   Returns the current record's "QuestionSpecialist" collection
 * @method Doctrine_Collection getQuestionSpecialty()    Returns the current record's "QuestionSpecialty" collection
 * @method Doctrine_Collection getQuestionSheetHistory() Returns the current record's "QuestionSheetHistory" collection
 * @method Question            setUserId()               Sets the current record's "user_id" value
 * @method Question            setUserAboutId()          Sets the current record's "user_about_id" value
 * @method Question            setBody()                 Sets the current record's "body" value
 * @method Question            setIsAnonymous()          Sets the current record's "is_anonymous" value
 * @method Question            setApproved()             Sets the current record's "approved" value
 * @method Question            setCommentId()            Sets the current record's "comment_id" value
 * @method Question            setTopicId()              Sets the current record's "topic_id" value
 * @method Question            setVkNotice()             Sets the current record's "vk_notice" value
 * @method Question            setClosedBy()             Sets the current record's "closed_by" value
 * @method Question            setClosingDate()          Sets the current record's "closing_date" value
 * @method Question            setUser()                 Sets the current record's "User" value
 * @method Question            setUserAbout()            Sets the current record's "UserAbout" value
 * @method Question            setUserClosed()           Sets the current record's "UserClosed" value
 * @method Question            setSpecialists()          Sets the current record's "Specialists" collection
 * @method Question            setSpecialtys()           Sets the current record's "Specialtys" collection
 * @method Question            setReview()               Sets the current record's "Review" collection
 * @method Question            setQuestionBlackList()    Sets the current record's "Question_black_list" collection
 * @method Question            setConsilium()            Sets the current record's "Consilium" collection
 * @method Question            setComplaint()            Sets the current record's "Complaint" collection
 * @method Question            setReceptionContract()    Sets the current record's "Reception_contract" collection
 * @method Question            setAnswer()               Sets the current record's "Answer" collection
 * @method Question            setQuestionData()         Sets the current record's "QuestionData" collection
 * @method Question            setQuestionSpecialist()   Sets the current record's "QuestionSpecialist" collection
 * @method Question            setQuestionSpecialty()    Sets the current record's "QuestionSpecialty" collection
 * @method Question            setQuestionSheetHistory() Sets the current record's "QuestionSheetHistory" collection
 * 
 * @package    sf
 * @subpackage model
 * @author     Atma
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseQuestion extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('question');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_about_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('body', 'text', null, array(
             'type' => 'text',
             'notnull' => true,
             ));
        $this->hasColumn('is_anonymous', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('approved', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('comment_id', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('topic_id', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('vk_notice', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             'default' => false,
             ));
        $this->hasColumn('closed_by', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('closing_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('User as UserAbout', array(
             'local' => 'user_about_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('User as UserClosed', array(
             'local' => 'closed_by',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Specialist as Specialists', array(
             'refClass' => 'QuestionSpecialist',
             'local' => 'question_id',
             'foreign' => 'specialist_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Specialty as Specialtys', array(
             'refClass' => 'QuestionSpecialty',
             'local' => 'question_id',
             'foreign' => 'specialty_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Review', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('Question_black_list', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('Consilium', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('Complaint', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('Reception_contract', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('Answer', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('QuestionData', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('QuestionSpecialist', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('QuestionSpecialty', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('QuestionSheetHistory', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}