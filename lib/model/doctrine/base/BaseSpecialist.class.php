<?php

/**
 * BaseSpecialist
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $specialty_id
 * @property string $title_url
 * @property float $rating
 * @property integer $answers_count
 * @property string $about
 * @property string $education
 * @property boolean $live_reception
 * @property string $certificate
 * @property integer $question_count
 * @property integer $prompt_count
 * @property integer $article_count
 * @property User $User
 * @property Specialty $Specialty
 * @property Doctrine_Collection $Questions
 * @property Doctrine_Collection $Consiliums
 * @property Doctrine_Collection $Lpus
 * @property Doctrine_Collection $Specialist_online
 * @property Doctrine_Collection $Review
 * @property Doctrine_Collection $Prompt
 * @property Doctrine_Collection $Article
 * @property Doctrine_Collection $Question_black_list
 * @property Doctrine_Collection $Specialist_work_place
 * @property Doctrine_Collection $ConsiliumSpecialist
 * @property Doctrine_Collection $Consilium_answer
 * @property Doctrine_Collection $Complaint
 * @property Doctrine_Collection $Reception_contract
 * @property Doctrine_Collection $QuestionSpecialist
 * 
 * @method integer             getUserId()                Returns the current record's "user_id" value
 * @method integer             getSpecialtyId()           Returns the current record's "specialty_id" value
 * @method string              getTitleUrl()              Returns the current record's "title_url" value
 * @method float               getRating()                Returns the current record's "rating" value
 * @method integer             getAnswersCount()          Returns the current record's "answers_count" value
 * @method string              getAbout()                 Returns the current record's "about" value
 * @method string              getEducation()             Returns the current record's "education" value
 * @method boolean             getLiveReception()         Returns the current record's "live_reception" value
 * @method string              getCertificate()           Returns the current record's "certificate" value
 * @method integer             getQuestionCount()         Returns the current record's "question_count" value
 * @method integer             getPromptCount()           Returns the current record's "prompt_count" value
 * @method integer             getArticleCount()          Returns the current record's "article_count" value
 * @method User                getUser()                  Returns the current record's "User" value
 * @method Specialty           getSpecialty()             Returns the current record's "Specialty" value
 * @method Doctrine_Collection getQuestions()             Returns the current record's "Questions" collection
 * @method Doctrine_Collection getConsiliums()            Returns the current record's "Consiliums" collection
 * @method Doctrine_Collection getLpus()                  Returns the current record's "Lpus" collection
 * @method Doctrine_Collection getSpecialistOnline()      Returns the current record's "Specialist_online" collection
 * @method Doctrine_Collection getReview()                Returns the current record's "Review" collection
 * @method Doctrine_Collection getPrompt()                Returns the current record's "Prompt" collection
 * @method Doctrine_Collection getArticle()               Returns the current record's "Article" collection
 * @method Doctrine_Collection getQuestionBlackList()     Returns the current record's "Question_black_list" collection
 * @method Doctrine_Collection getSpecialistWorkPlace()   Returns the current record's "Specialist_work_place" collection
 * @method Doctrine_Collection getConsiliumSpecialist()   Returns the current record's "ConsiliumSpecialist" collection
 * @method Doctrine_Collection getConsiliumAnswer()       Returns the current record's "Consilium_answer" collection
 * @method Doctrine_Collection getComplaint()             Returns the current record's "Complaint" collection
 * @method Doctrine_Collection getReceptionContract()     Returns the current record's "Reception_contract" collection
 * @method Doctrine_Collection getQuestionSpecialist()    Returns the current record's "QuestionSpecialist" collection
 * @method Specialist          setUserId()                Sets the current record's "user_id" value
 * @method Specialist          setSpecialtyId()           Sets the current record's "specialty_id" value
 * @method Specialist          setTitleUrl()              Sets the current record's "title_url" value
 * @method Specialist          setRating()                Sets the current record's "rating" value
 * @method Specialist          setAnswersCount()          Sets the current record's "answers_count" value
 * @method Specialist          setAbout()                 Sets the current record's "about" value
 * @method Specialist          setEducation()             Sets the current record's "education" value
 * @method Specialist          setLiveReception()         Sets the current record's "live_reception" value
 * @method Specialist          setCertificate()           Sets the current record's "certificate" value
 * @method Specialist          setQuestionCount()         Sets the current record's "question_count" value
 * @method Specialist          setPromptCount()           Sets the current record's "prompt_count" value
 * @method Specialist          setArticleCount()          Sets the current record's "article_count" value
 * @method Specialist          setUser()                  Sets the current record's "User" value
 * @method Specialist          setSpecialty()             Sets the current record's "Specialty" value
 * @method Specialist          setQuestions()             Sets the current record's "Questions" collection
 * @method Specialist          setConsiliums()            Sets the current record's "Consiliums" collection
 * @method Specialist          setLpus()                  Sets the current record's "Lpus" collection
 * @method Specialist          setSpecialistOnline()      Sets the current record's "Specialist_online" collection
 * @method Specialist          setReview()                Sets the current record's "Review" collection
 * @method Specialist          setPrompt()                Sets the current record's "Prompt" collection
 * @method Specialist          setArticle()               Sets the current record's "Article" collection
 * @method Specialist          setQuestionBlackList()     Sets the current record's "Question_black_list" collection
 * @method Specialist          setSpecialistWorkPlace()   Sets the current record's "Specialist_work_place" collection
 * @method Specialist          setConsiliumSpecialist()   Sets the current record's "ConsiliumSpecialist" collection
 * @method Specialist          setConsiliumAnswer()       Sets the current record's "Consilium_answer" collection
 * @method Specialist          setComplaint()             Sets the current record's "Complaint" collection
 * @method Specialist          setReceptionContract()     Sets the current record's "Reception_contract" collection
 * @method Specialist          setQuestionSpecialist()    Sets the current record's "QuestionSpecialist" collection
 * 
 * @package    sf
 * @subpackage model
 * @author     Atma
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSpecialist extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('specialist');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('specialty_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('title_url', 'string', 1000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 1000,
             ));
        $this->hasColumn('rating', 'float', 2, array(
             'type' => 'float',
             'length' => 2,
             'scale' => '1',
             ));
        $this->hasColumn('answers_count', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('about', 'string', 10000, array(
             'type' => 'string',
             'length' => 10000,
             ));
        $this->hasColumn('education', 'string', 10000, array(
             'type' => 'string',
             'length' => 10000,
             ));
        $this->hasColumn('live_reception', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('certificate', 'string', 10000, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 10000,
             ));
        $this->hasColumn('question_count', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('prompt_count', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('article_count', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Specialty', array(
             'local' => 'specialty_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Question as Questions', array(
             'refClass' => 'QuestionSpecialist',
             'local' => 'specialist_id',
             'foreign' => 'question_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Consilium as Consiliums', array(
             'refClass' => 'ConsiliumSpecialist',
             'local' => 'specialist_id',
             'foreign' => 'consilium_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Lpu as Lpus', array(
             'refClass' => 'LpuSpecialist',
             'local' => 'specialist_id',
             'foreign' => 'lpu_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Specialist_online', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('Review', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('Prompt', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('Article', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('Question_black_list', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('Specialist_work_place', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('ConsiliumSpecialist', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('Consilium_answer', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('Complaint', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('Reception_contract', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));

        $this->hasMany('QuestionSpecialist', array(
             'local' => 'id',
             'foreign' => 'specialist_id'));
    }
}