<?php

/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf
 * @subpackage model
 * @author     Atma
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class User extends PluginUser
{
  
  public function getSpecialist()
  {
    foreach(parent::_get('Specialist') as $s)
    {
      if(is_null($s->getId()))
      {
        return array();
      }
    }
    return parent::_get('Specialist');
  }
  
  
  public function getSFM()
  {
    return $this->getSecondName() . ' ' . $this->getFirstName() . ' ' . $this->getMiddleName();
  }

  public function getOpenQuestions($location = false, $id = false, $filter = false)
  {
    $questions = Doctrine_Query::create()
      ->select("q.*, s.*, su.*, qs.*, qu.*, qr.*")
      ->from("Question q")
      ->innerJoin('q.User qu')
      ->leftJoin("q.QuestionSpecialist qs")
      ->leftJoin("qs.Specialist s")
      ->leftJoin("q.Review qr")
      ->leftJoin("s.User su")
      ->orderBy("q.created_at DESC")
    ;
    if($this->getSpecialist())
    {
      if($location == 'question_list')
      {
        $questions->addSelect("an.*");
        $questions->leftJoin("q.Answer an");
        $questions->orderBy("an.created_at DESC");
      }
      if($location == 'consilium')
      {
        $questions->addSelect("c.*, cs.*, ccs.*, ccsu.*");
        $questions->innerJoin("q.Consilium c");
        $questions->innerJoin("c.ConsiliumSpecialist cs");
        $questions
          ->leftJoin("cs.Specialist ccs")
          ->leftJoin("ccs.User ccsu")
        ;
        $questions->where("ccsu.id = " . $this->getId());
        $questions->orderBy("c.created_at DESC");
      }
      elseif($location == 'question')
      {
        $questions->addSelect("a.*, ant.*, au.*, qua.*, an.*, rc.*, qsh.*");
        $questions->leftJoin("q.UserAbout qua");
        $questions->leftJoin("q.Answer a");
        $questions->leftJoin("a.User au");
        $questions->leftJoin("q.Reception_contract rc");
        $questions->leftJoin("a.Analysis an");
        $questions->leftJoin("an.Analysis_type ant");
        $questions->leftJoin("q.QuestionSheetHistory qsh");
        $questions->where("q.id = " . $id);
        $questions->orderBy("a.created_at ASC");
      }
      else
      {
        $questions->where("su.id = " . $this->getId());
      }
    }
    else
    {
      $questions->where("q.user_id = " . $this->getId());
    }

    if($filter == 'open' || $filter == 'close')
    {
      $questions->andWhere("q.closed_by IS " . ($filter == 'open' ? '' : 'NOT') . " NULL");
    }

    return $questions->fetchArray();
  }
}
